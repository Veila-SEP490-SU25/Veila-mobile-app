#!/usr/bin/env node

/**
 * Script t·ª± ƒë·ªông fix Firebase Console cho reCAPTCHA
 * Ch·∫°y: node scripts/auto-fix-firebase-console.js
 */

const fs = require("fs");
const path = require("path");

console.log("üîß Script t·ª± ƒë·ªông fix Firebase Console cho reCAPTCHA...\n");

// Colors for console output
const colors = {
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
  reset: "\x1b[0m",
  bold: "\x1b[1m",
};

const log = (color, message) => {
  console.log(`${color}${message}${colors.reset}`);
};

// 1. Ki·ªÉm tra c·∫•u h√¨nh hi·ªán t·∫°i
log(colors.blue, "1Ô∏è‚É£ Ki·ªÉm tra c·∫•u h√¨nh hi·ªán t·∫°i:");

// Ki·ªÉm tra app.json
try {
  const appJson = JSON.parse(fs.readFileSync("app.json", "utf8"));
  const iosBundleId = appJson.expo?.ios?.bundleIdentifier;
  log(colors.green, `   iOS Bundle ID: ${iosBundleId || "‚ùå Kh√¥ng c√≥"}`);
} catch (error) {
  log(colors.red, `   ‚ùå Kh√¥ng th·ªÉ ƒë·ªçc app.json: ${error.message}`);
}

// Ki·ªÉm tra GoogleService-Info.plist
const iosProjectPath = path.join(__dirname, "..", "ios");
const googleServicePath = path.join(
  iosProjectPath,
  "Veila",
  "GoogleService-Info.plist"
);

if (fs.existsSync(googleServicePath)) {
  log(colors.green, "   GoogleService-Info.plist: ‚úÖ C√≥");
} else {
  log(colors.red, "   GoogleService-Info.plist: ‚ùå Kh√¥ng c√≥");
}

// 2. H∆∞·ªõng d·∫´n fix Firebase Console
log(colors.magenta, "\nüîß H∆Ø·ªöNG D·∫™N FIX FIREBASE CONSOLE T·ª∞ ƒê·ªòNG:");

log(colors.cyan, "B∆∞·ªõc 1: V√†o Firebase Console");
log(colors.white, "   ‚Ä¢ M·ªü browser: https://console.firebase.google.com/");
log(colors.white, "   ‚Ä¢ ƒêƒÉng nh·∫≠p v·ªõi Google account");
log(colors.white, "   ‚Ä¢ Ch·ªçn project Veila");

log(colors.cyan, "\nB∆∞·ªõc 2: Enable Phone Authentication");
log(colors.white, "   ‚Ä¢ Trong menu b√™n tr√°i, click Authentication");
log(colors.white, "   ‚Ä¢ Ch·ªçn tab Sign-in method");
log(colors.white, "   ‚Ä¢ T√¨m Phone trong danh s√°ch providers");
log(colors.white, "   ‚Ä¢ Click v√†o Phone ‚Üí Enable (n·∫øu ch∆∞a enable)");
log(colors.white, "   ‚Ä¢ Click Save");

log(colors.cyan, "\nB∆∞·ªõc 3: Th√™m Authorized Domains (QUAN TR·ªåNG!)");
log(colors.white, "   ‚Ä¢ Trong Authentication, click Settings");
log(colors.white, "   ‚Ä¢ Ch·ªçn tab Authorized domains");
log(colors.white, '   ‚Ä¢ Click "Add domain" v√† th√™m t·ª´ng domain:');
log(colors.yellow, "     + localhost");
log(colors.yellow, "     + 127.0.0.1");
log(colors.yellow, "     + exp.host (B·∫ÆT BU·ªòC cho Expo)");
log(colors.yellow, "     + auth.expo.io (B·∫ÆT BU·ªòC cho Expo)");
log(colors.white, '   ‚Ä¢ Click "Add" cho m·ªói domain');

log(colors.cyan, "\nB∆∞·ªõc 4: Th√™m iOS App");
log(colors.white, "   ‚Ä¢ Click Project Settings (‚öôÔ∏è icon) ·ªü g√≥c tr√°i");
log(colors.white, "   ‚Ä¢ Ch·ªçn tab General");
log(colors.white, "   ‚Ä¢ Scroll xu·ªëng ph·∫ßn Your apps");
log(colors.white, '   ‚Ä¢ Click "Add app" ‚Üí iOS');
log(colors.white, "   ‚Ä¢ Nh·∫≠p Bundle ID: com.veila.app");
log(colors.white, "   ‚Ä¢ Nh·∫≠p App nickname: Veila iOS");
log(colors.white, "   ‚Ä¢ Click Register app");

log(colors.cyan, "\nB∆∞·ªõc 5: Download GoogleService-Info.plist");
log(colors.white, "   ‚Ä¢ Sau khi ƒëƒÉng k√Ω app, Firebase s·∫Ω t·∫°o file config");
log(colors.white, '   ‚Ä¢ Click "Download GoogleService-Info.plist"');
log(colors.white, "   ‚Ä¢ Copy file n√†y v√†o ios/Veila/ folder");

log(colors.cyan, "\nB∆∞·ªõc 6: C·∫•u h√¨nh Phone Numbers for Testing");
log(colors.white, "   ‚Ä¢ Trong Authentication ‚Üí Sign-in method ‚Üí Phone");
log(colors.white, '   ‚Ä¢ Ch·ªçn tab "Phone numbers for testing"');
log(colors.white, '   ‚Ä¢ Click "Add phone number"');
log(colors.white, "   ‚Ä¢ Nh·∫≠p s·ªë: +84937961828");
log(colors.white, "   ‚Ä¢ Nh·∫≠p OTP: 123456");
log(colors.white, "   ‚Ä¢ Click Save");

log(colors.cyan, "\nB∆∞·ªõc 7: T·∫Øt Enterprise reCAPTCHA (n·∫øu c√≥)");
log(colors.white, "   ‚Ä¢ Trong Authentication ‚Üí Settings ‚Üí Phone numbers");
log(colors.white, '   ‚Ä¢ T√¨m "Enterprise reCAPTCHA"');
log(colors.white, "   ‚Ä¢ N·∫øu c√≥, v√¥ hi·ªáu h√≥a ƒë·ªÉ d√πng m·∫∑c ƒë·ªãnh v2");

// 3. Script t·ª± ƒë·ªông copy GoogleService-Info.plist
log(colors.blue, "\n2Ô∏è‚É£ Script t·ª± ƒë·ªông copy GoogleService-Info.plist:");

const downloadScript = `#!/bin/bash

echo "üì• T·ª± ƒë·ªông copy GoogleService-Info.plist..."

# T·∫°o th∆∞ m·ª•c ios/Veila n·∫øu ch∆∞a c√≥
mkdir -p ios/Veila

# Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
if [ -f "ios/Veila/GoogleService-Info.plist" ]; then
    echo "‚úÖ GoogleService-Info.plist ƒë√£ t·ªìn t·∫°i"
else
    echo "‚ùå GoogleService-Info.plist ch∆∞a c√≥"
    echo "üìã H√£y l√†m theo c√°c b∆∞·ªõc sau:"
    echo "1. Download GoogleService-Info.plist t·ª´ Firebase Console"
    echo "2. Copy file v√†o th∆∞ m·ª•c ios/Veila/"
    echo "3. Ch·∫°y l·∫°i script n√†y"
fi

echo "üîç Ki·ªÉm tra c·∫•u h√¨nh..."
if [ -f "ios/Veila/GoogleService-Info.plist" ]; then
    echo "‚úÖ File t·ªìn t·∫°i"
    echo "üì± Bundle ID trong file:"
    grep -o 'com\\.[^<]*' ios/Veila/GoogleService-Info.plist || echo "‚ùå Kh√¥ng t√¨m th·∫•y Bundle ID"
else
    echo "‚ùå File kh√¥ng t·ªìn t·∫°i"
fi
`;

const scriptPath = path.join(__dirname, "download-google-service-info.sh");
fs.writeFileSync(scriptPath, downloadScript);
fs.chmodSync(scriptPath, "755");

log(colors.green, `   ‚úÖ Script t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c t·∫°o: ${scriptPath}`);
log(colors.white, "   üí° Ch·∫°y: bash scripts/download-google-service-info.sh");

// 4. H∆∞·ªõng d·∫´n test
log(colors.green, "\nüéØ H∆Ø·ªöNG D·∫™N TEST:");

log(colors.white, "1. Sau khi fix Firebase Console, restart app");
log(colors.white, "2. Clear Metro cache:");
log(colors.yellow, "   npx expo start --clear");
log(colors.white, "3. Test Phone Authentication v·ªõi s·ªë +84937961828");
log(colors.white, "4. S·ª≠ d·ª•ng OTP test: 123456");

// 5. K·∫øt qu·∫£ mong ƒë·ª£i
log(colors.green, "\n‚úÖ K·∫æT QU·∫¢ MONG ƒê·ª¢I:");

log(colors.white, "Sau khi fix Firebase Console:");
log(colors.yellow, "LOG reCAPTCHA verifier ref set successfully");
log(colors.yellow, "LOG reCAPTCHA verifier reset");
log(colors.yellow, "LOG reCAPTCHA verifier ready: true");
log(
  colors.yellow,
  "LOG Using firebase/compat with expo-firebase-recaptcha verifier"
);
log(
  colors.yellow,
  "LOG Firebase Phone Auth: SMS sent successfully to +84937961828"
);

// 6. Troubleshooting
log(colors.red, "\nüö® N·∫æU V·∫™N G·∫∂P L·ªñI:");

log(colors.white, "1. Ki·ªÉm tra Firebase Console c√≥ enable Phone Auth ch∆∞a");
log(
  colors.white,
  "2. Ki·ªÉm tra Authorized Domains c√≥ exp.host v√† auth.expo.io ch∆∞a"
);
log(colors.white, "3. Ki·ªÉm tra iOS App c√≥ Bundle ID com.veila.app ch∆∞a");
log(colors.white, "4. Ki·ªÉm tra GoogleService-Info.plist c√≥ ƒë√∫ng kh√¥ng");
log(
  colors.white,
  "5. Ki·ªÉm tra Phone Numbers for Testing c√≥ s·ªë +84937961828 kh√¥ng"
);

log(colors.blue, "\nüìû H·ªñ TR·ª¢:");

log(colors.white, "N·∫øu v·∫´n g·∫∑p v·∫•n ƒë·ªÅ:");
log(colors.white, "1. Ch·ª•p m√†n h√¨nh Firebase Console");
log(colors.white, "2. Copy console logs");
log(colors.white, "3. G·ª≠i th√¥ng tin cho team dev");

log(colors.green, "\nüéâ CH√öC M·ª™NG!");

log(
  colors.white,
  "Sau khi l√†m theo h∆∞·ªõng d·∫´n n√†y, Firebase Phone Auth s·∫Ω ho·∫°t ƒë·ªông ho√†n h·∫£o!"
);
log(
  colors.white,
  "reCAPTCHA token response s·∫Ω h·ª£p l·ªá v√† SMS s·∫Ω ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!"
);
